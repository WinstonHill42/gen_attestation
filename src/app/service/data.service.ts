import {Injectable} from '@angular/core';
import {Attestation} from "../attestation";
import {Storage} from '@ionic/storage';
import {Pax} from "../pax";

@Injectable({
    providedIn: 'root'
})
export class DataService {

    // Liste des identit√©s cr√©es
    listePax: Array<Pax>;

    // Liste des motifs existants
    motifs: Array<Motif>;

    // Liste des attestations en m√©moire
    attestations: Array<Attestation>;

    // Liste temporaire des QRCode √† afficher
    tempListQR = [];

    //bool√©en pour l'affichage de la mise en garde li√©e aux justificatifs
    miseEnGardeActif = true;


    constructor(private storage: Storage) {
        this.attestations = [];
        this.motifs = [
            {
                infos: "D√©placements entre le domicile et le lieu d‚Äôexercice de l‚Äôactivit√© professionnelle ou un √©tablissement d‚Äôenseignement ou de formation ; d√©placements professionnels ne pouvant √™tre diff√©r√©s; d√©placements pour un concours ou un examen;",
                value: 'travail',
                text: 'üî® Travail',
                isChecked: false
            },
            {
                infos: "D√©placements pour se rendre dans un √©tablissement culturel autoris√© ou un lieu de culte; d√©placements pour effectuer des achats de biens, pour des services dont la fourniture est autoris√©e, pour les retraits de commandes et les livraisons √† domicile;",
                value: 'achats',
                text: '‚õ™ Culte, üéÅ achats, üì¶ retrait de commande',
                isChecked: false
            },
            {
                text: '‚öïÔ∏è Sant√©',
                value: 'sante',
                infos: "Consultations, examens et soins ne pouvant √™tre assur√©s √† distance et l‚Äôachat de m√©dicaments;",
                isChecked: false
            },
            {
                infos: "D√©placements pour motif familial imp√©rieux, pour l'assistance aux personnes vuln√©rables et pr√©caires ou la garde d'enfants;",
                value: 'famille',
                text: 'üë®‚Äçüë©‚Äçüë¶ Famille',
                isChecked: false
            },
            {
                text: '‚ôø Handicap',
                value: 'handicap',
                infos: 'D√©placement des personnes en situation de handicap et leur accompagnant.',
                isChecked: false
            },
            {
                text: 'üèÉ Sport & animaux',
                value: 'sport_animaux',
                infos: "D√©placements en plein air ou vers un lieu de plein air, sans changement du lieu de r√©sidence, dans la limite de trois heures quotidiennes et dans un rayon maximal de vingt kilom√®tres autour du domicile, li√©s soit √† l‚Äôactivit√© physique ou aux loisirs individuels, √† l‚Äôexclusion de toute pratique sportive collective et de toute proximit√© avec d‚Äôautres personnes, soit √† la promenade avec les seules personnes regroup√©es dans un m√™me domicile, soit aux besoins des animaux de compagnie;",
                isChecked: false
            },

            {
                text: '‚öñÔ∏è Convocation judiciaire',
                value: 'convocation', infos: 'Convocation judiciaire ou administrative et pour se rendre dans un service public.', isChecked: false
            },
            {
                text: 'Missions',
                value: 'missions',
                infos: 'Participation √† des missions d\'int√©r√™t g√©n√©ral sur demande de l\'autorit√© administrative.', isChecked: false
            },
            {
                text: 'üö∏ Enfants',
                value: 'enfants',
                infos: 'D√©placement pour chercher les enfants √† l‚Äô√©cole et √† l‚Äôoccasion de leurs activit√©s p√©riscolaires', isChecked: false
            }];
        this.listePax= [];

        storage.ready().then(() => {
            this.getData()
        });

    }

    // sauvegarde des donn√©es sur le t√©l√©phone
    saveData() {
        console.log("saving");
        this.storage.set('attestations', this.attestations);
        this.storage.set('bioData', this.listePax);
        this.storage.set('miseEnGarde', this.miseEnGardeActif);
    }

    // r√©cup√®re les donn√©es persist√©es en m√©moire
    async getData() {
        let temp = await this.storage.get('attestations');
        if (temp !== null) {
            this.attestations = temp;
        }
        temp = await this.storage.get('bioData');
        if (temp !== null) {
            this.listePax = temp;
        }
        temp = await this.storage.get('miseEnGarde');
        if (temp !== null) {
            this.miseEnGardeActif = temp;
        }
    }

    // remise √† z√©ro des donn√©es d'identit√©
    razBio() {
        this.listePax = [];
        this.saveData();
    }

    // remise √† z√©ro des donn√©es d'attestations
    razAttest() {
        this.attestations = [];
        this.saveData();
    }
}

interface Motif {
    text,
    value,
    infos,
    isChecked
}





