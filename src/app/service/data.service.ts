import {Injectable} from '@angular/core';
import {Attestation} from "../attestation";
import {Storage} from '@ionic/storage';
import {Pax} from "../pax";

@Injectable({
    providedIn: 'root'
})
export class DataService {

    // Liste des identit√©s cr√©es
    listePax: Array<Pax>;

    // Liste des motifs existants
    motifs: Array<Motif>;

    // Liste des attestations en m√©moire
    attestations: Array<Attestation>;

    // Liste temporaire des QRCode √† afficher
    tempListQR = [];

    //bool√©en pour l'affichage de la mise en garde li√©e aux justificatifs
    miseEnGardeActif = true;


    constructor(private storage: Storage) {
        this.attestations = [];

        this.motifs = [
            {
                infos: "D√©placements entre le domicile et le lieu d'exercice de l'activit√© professionnelle ou le lieu d'enseignement et de formation, d√©placements professionnels ne pouvant √™tre diff√©r√©s‚ÄØ;",
                value: 'travail',
                text: 'üî® Travail',
                isChecked: false
            },
            {
                text: '‚öïÔ∏è Sant√©',
                value: 'sante',
                infos: "D√©placements pour des consultations et soins ne pouvant √™tre assur√©s √† distance et ne pouvant √™tre diff√©r√©s ou pour l'achat de produits de sant√©‚ÄØ;",
                isChecked: false
            },
            {
                infos: "D√©placements pour motif familial imp√©rieux, pour l'assistance aux personnes vuln√©rables ou pr√©caires ou pour la garde d'enfants‚ÄØ;",
                value: 'famille',
                text: 'üë®‚Äçüë©‚Äçüë¶ Famille',
                isChecked: false
            },
            {
                text: '‚ôø Handicap',
                value: 'handicap',
                infos: 'D√©placements des personnes en situation de handicap et de leur accompagnant‚ÄØ;',
                isChecked: false
            },
            {
                text: '‚öñÔ∏è Convocation judiciaire',
                value: 'convocation',
                infos: 'D√©placements pour r√©pondre √† une convocation judiciaire ou administrative‚ÄØ;',
                isChecked: false
            },
            {
                text: 'Missions',
                value: 'missions',
                infos: 'D√©placements pour participer √† des missions d\'int√©r√™t g√©n√©ral sur demande de l\'autorit√© administrative‚ÄØ;',
                isChecked: false
            },
            {
                text: '‚úàÔ∏è Transits',
                value: 'transits',
                infos: 'D√©placements li√©s √† des transits ferroviaires ou a√©riens pour des d√©placements de longues distances‚ÄØ;',
                isChecked: false
            },
            {
                text: 'üê∂ Animaux',
                value: 'animaux',
                infos: "D√©placements brefs, dans un rayon maximal d'un kilom√®tre autour du domicile pour les besoins des animaux de compagnie.",
                isChecked: false
            }];
        this.listePax= [];

        storage.ready().then(() => {
            this.getData()
        });

    }

    // sauvegarde des donn√©es sur le t√©l√©phone
    saveData() {
        console.log("saving");
        this.storage.set('attestations', this.attestations);
        this.storage.set('bioData', this.listePax);
        this.storage.set('miseEnGarde', this.miseEnGardeActif);
    }

    // r√©cup√®re les donn√©es persist√©es en m√©moire
    async getData() {
        let temp = await this.storage.get('attestations');
        if (temp !== null) {
            this.attestations = temp;
        }
        temp = await this.storage.get('bioData');
        if (temp !== null) {
            this.listePax = temp;
        }
        temp = await this.storage.get('miseEnGarde');
        if (temp !== null) {
            this.miseEnGardeActif = temp;
        }
    }

    // remise √† z√©ro des donn√©es d'identit√©
    razBio() {
        this.listePax = [];
        this.saveData();
    }

    // remise √† z√©ro des donn√©es d'attestations
    razAttest() {
        this.attestations = [];
        this.saveData();
    }
}

interface Motif {
    text,
    value,
    infos,
    isChecked
}





